-- phpMyAdmin SQL Dump
-- version 5.0.3
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: Jan 25, 2021 at 12:22 PM
-- Server version: 10.4.14-MariaDB
-- PHP Version: 7.4.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `pyhub`
--

-- --------------------------------------------------------

--
-- Table structure for table `email_verification`
--

CREATE TABLE `email_verification` (
  `id` int(11) NOT NULL,
  `email` varchar(1000) NOT NULL,
  `username` varchar(1000) NOT NULL,
  `password` varchar(1000) NOT NULL,
  `otp` varchar(10) NOT NULL,
  `date` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `title` varchar(1000) NOT NULL,
  `tags` varchar(100) NOT NULL,
  `description` varchar(5000) NOT NULL,
  `code` varchar(5000) NOT NULL,
  `output` varchar(5000) NOT NULL,
  `date` timestamp NOT NULL DEFAULT current_timestamp(),
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `tags`, `description`, `code`, `output`, `date`, `user_id`) VALUES
(13, 'Python Program to Print Hello world!', 'hello-world', 'A simple program that displays “Hello, World!”. It\'s often used to illustrate the syntax of the language.', '# This program prints Hello, world!\r\n\r\nprint(\'Hello, world!\')', 'Hello, world!', '2021-01-24 15:11:09', 1),
(14, 'Python Program to Add Two Numbers : Add Two Numbers', 'add sum', 'In this program, you will learn to add two numbers and display it using print() function.\r\nIn the program below, we\'ve used the + operator to add two numbers.', '# This program adds two numbers\r\n\r\nnum1 = 1.5\r\nnum2 = 6.3\r\n\r\n# Add two numbers\r\nsum = num1 + num2\r\n\r\n# Display the sum\r\nprint(\'The sum of {0} and {1} is {2}\'.format(num1, num2, sum))', 'The sum of 1.5 and 6.3 is 7.8', '2021-01-24 15:25:31', 1),
(15, 'Python Program to Add Two Numbers : Add Two Numbers With User Input', 'add sum user-input', 'The program calculates the sum of two numbers entered by the user.\r\nIn this program, we asked the user to enter two numbers and this program displays the sum of two numbers entered by user.\r\n\r\nWe use the built-in function input() to take the input. Since, input() returns a string, we convert the string into number using the float() function. Then, the numbers are added.', '# Store input numbers\r\nnum1 = input(\'Enter first number: \')\r\nnum2 = input(\'Enter second number: \')\r\n\r\n# Add two numbers\r\nsum = float(num1) + float(num2)\r\n\r\n# Display the sum\r\nprint(\'The sum of {0} and {1} is {2}\'.format(num1, num2, sum))', 'Enter first number: 1.5\r\nEnter second number: 6.3\r\nThe sum of 1.5 and 6.3 is 7.8', '2021-01-24 16:05:05', 1),
(17, 'Python Program to Find the Square Root : For positive numbers', 'square-root', 'In this program, we store the number in num and find the square root using the ** exponent operator. This program works for all positive real numbers. But for negative or complex numbers, it can be done as follows.', '# Python Program to calculate the square root\r\n\r\n# Note: change this value for a different result\r\nnum = 8 \r\n\r\n# To take the input from the user\r\n#num = float(input(\'Enter a number: \'))\r\n\r\nnum_sqrt = num ** 0.5\r\nprint(\'The square root of %0.3f is %0.3f\'%(num ,num_sqrt))', 'The square root of 8.000 is 2.828', '2021-01-25 07:14:18', 1),
(18, 'Python Program to Find the Square Root : For real or complex numbers', 'square-root', 'In this program, we use the sqrt() function in the cmath (complex math) module.\r\n\r\nNotice that we have used the eval() function instead of float() to convert complex numbers as well. Also, notice the way in which the output is formatted.', '# Find square root of real or complex numbers\r\n# Importing the complex math module\r\nimport cmath\r\n\r\nnum = 1+2j\r\n\r\n# To take input from the user\r\n#num = eval(input(\'Enter a number: \'))\r\n\r\nnum_sqrt = cmath.sqrt(num)\r\nprint(\'The square root of {0} is {1:0.3f}+{2:0.3f}j\'.format(num ,num_sqrt.real,num_sqrt.imag))', 'The square root of (1+2j) is 1.272+0.786j', '2021-01-25 07:29:59', 1),
(19, 'Python Program to Calculate the Area of a Triangle', 'triangle area', 'In this program, area of the triangle is calculated when three sides are given using Heron\'s formula.\r\n\r\nIf you need to calculate area of a triangle depending upon the input from the user, input() function can be used.\r\n\r\n\r\nIf a, b and c are three sides of a triangle. Then,\r\ns = (a+b+c)/2\r\narea = √(s(s-a)*(s-b)*(s-c))', '# Python Program to find the area of triangle\r\n\r\na = 5\r\nb = 6\r\nc = 7\r\n\r\n# Uncomment below to take inputs from the user\r\n# a = float(input(\'Enter first side: \'))\r\n# b = float(input(\'Enter second side: \'))\r\n# c = float(input(\'Enter third side: \'))\r\n\r\n# calculate the semi-perimeter\r\ns = (a + b + c) / 2\r\n\r\n# calculate the area\r\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\r\nprint(\'The area of the triangle is %0.2f\' %area)', 'The area of the triangle is 14.70', '2021-01-25 07:37:18', 1),
(20, 'Python Program to Solve Quadratic Equation', 'quadratic equation', 'This program computes roots of a quadratic equation when coefficients a, b and c are known.\r\n\r\nWe have imported the cmath module to perform complex square root. First, we calculate the discriminant and then find the two solutions of the quadratic equation.\r\n\r\nYou can change the value of a, b and c in the above program and test this program.\r\n\r\nThe standard form of a quadratic equation is:\r\nax2 + bx + c = 0, where\r\na, b and c are real numbers and\r\na ≠ 0', '# Solve the quadratic equation ax**2 + bx + c = 0\r\n\r\n# import complex math module\r\nimport cmath\r\n\r\na = 1\r\nb = 5\r\nc = 6\r\n\r\n# calculate the discriminant\r\nd = (b**2) - (4*a*c)\r\n\r\n# find two solutions\r\nsol1 = (-b-cmath.sqrt(d))/(2*a)\r\nsol2 = (-b+cmath.sqrt(d))/(2*a)\r\n\r\nprint(\'The solution are {0} and {1}\'.format(sol1,sol2))', 'Enter a: 1\r\nEnter b: 5\r\nEnter c: 6\r\nThe solutions are (-3+0j) and (-2+0j)', '2021-01-25 07:40:45', 1),
(21, 'Python Program to Swap Two Variables : Using a temporary variable', 'swap', 'In this example, you will learn to swap two variables by using a temporary variable and, without using temporary variable.\r\nIn this program, we use the temp variable to hold the value of x temporarily. We then put the value of y in x and later temp in y. In this way, the values get exchanged.', '# Python program to swap two variables\r\n\r\nx = 5\r\ny = 10\r\n\r\n# To take inputs from the user\r\n#x = input(\'Enter value of x: \')\r\n#y = input(\'Enter value of y: \')\r\n\r\n# create a temporary variable and swap the values\r\ntemp = x\r\nx = y\r\ny = temp\r\n\r\nprint(\'The value of x after swapping: {}\'.format(x))\r\nprint(\'The value of y after swapping: {}\'.format(y))', 'The value of x after swapping: 10\r\nThe value of y after swapping: 5', '2021-01-25 07:43:16', 1),
(22, 'Python Program to Swap Two Variables : Without Using Temporary Variable', 'swap', 'In Python, there is a simple construct to swap variables. The following code does the same as above but without the use of any temporary variable.', 'x = 5\r\ny = 10\r\n\r\nx, y = y, x\r\nprint(\"x =\", x)\r\nprint(\"y =\", y)', 'x = 10\r\ny = 5', '2021-01-25 07:46:32', 1),
(23, 'Python Program to Swap Two Variables : Addition and Subtraction', 'swap', 'Swap Two Variables using Addition and Subtraction.', 'x=5\r\ny=10\r\nx = x + y\r\ny = x - y\r\nx = x - y\r\nprint(\"x=\",x)\r\nprint(\"y=\",y)', 'x=10\r\ny=5', '2021-01-25 07:48:49', 1),
(24, 'Python Program to Swap Two Variables : Multiplication and Division', 'swap', 'Swap Two Variables using Multiplication and Division', 'x=5\r\ny=10\r\nx = x * y\r\ny = x / y\r\nx = x / y\r\nprint(\"x=\",x)\r\nprint(\"y=\",y)', 'x=10\r\ny=5', '2021-01-25 07:50:19', 1),
(25, 'Python Program to Swap Two Variables : XOR swap', 'swap', 'Swapping Two Variables using XOR swap method.\r\nThis algorithm works for integers only', 'x=5\r\ny=10\r\nx = x ^ y\r\ny = x ^ y\r\nx = x ^ y\r\nprint(\"x=\",x)\r\nprint(\"y=\",y)', 'x=10\r\ny=5', '2021-01-25 07:51:46', 1),
(26, 'Python Program to Generate a Random Number', 'random numbers', 'In this example, you will learn to generate a random number in Python.\r\nTo generate random number in Python, randint() function is used. This function is defined in random module.', '# Program to generate a random number between 0 and 9\r\n\r\n# importing the random module\r\nimport random\r\n\r\nprint(random.randint(0,9))', '5', '2021-01-25 08:15:28', 1),
(27, 'Python Program to Convert Kilometers to Miles', 'kilometers miles', 'In this example, we\'ll learn to convert kilometers to miles and display it.', '# Taking kilometers input from the user\r\nkilometers = float(input(\"Enter value in kilometers: \"))\r\n\r\n# conversion factor\r\nconv_fac = 0.621371\r\n\r\n# calculate miles\r\nmiles = kilometers * conv_fac\r\nprint(\'%0.2f kilometers is equal to %0.2f miles\' %(kilometers,miles))', 'Enter value in kilometers: 3.5\r\n3.50 kilometers is equal to 2.17 miles', '2021-01-25 09:34:53', 1),
(28, 'Python Program to Convert Celsius To Fahrenheit', 'celsius fahrenheit', 'In this program, you\'ll learn to convert Celsuis to Fahrenheit and display it.\r\nIn the program below, we take a temperature in degree Celsius and convert it into degree Fahrenheit. They are related by the formula:\r\n\r\ncelsius * 1.8 = fahrenheit - 32', '# Python Program to convert temperature in celsius to fahrenheit\r\n\r\n# change this value for a different result\r\ncelsius = 37.5\r\n\r\n# calculate fahrenheit\r\nfahrenheit = (celsius * 1.8) + 32\r\nprint(\'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit\' %(celsius,fahrenheit))', '37.5 degree Celsius is equal to 99.5 degree Fahrenheit', '2021-01-25 09:37:19', 1),
(29, 'Python Program to Check if a Number is Positive, Negative or 0 : Using if...elif...else', 'positive negative neutral numbers', 'In this example, you will learn to check whether a number entered by the user is positive, negative or zero. This problem is solved using if...elif...else statement.', 'num = float(input(\"Enter a number: \"))\r\nif num > 0:\r\n   print(\"Positive number\")\r\nelif num == 0:\r\n   print(\"Zero\")\r\nelse:\r\n   print(\"Negative number\")', 'Enter a number: 2\r\nPositive number\r\n\r\nEnter a number: 0\r\nZero', '2021-01-25 09:39:51', 1),
(30, 'Python Program to Check if a Number is Positive, Negative or 0 : Using Nested if', 'positive negative neutral numbers', 'In this example, you will learn to check whether a number entered by the user is positive, negative or zero. This problem is solved using nested if...else statement.', 'num = float(input(\"Enter a number: \"))\r\nif num >= 0:\r\n   if num == 0:\r\n       print(\"Zero\")\r\n   else:\r\n       print(\"Positive number\")\r\nelse:\r\n   print(\"Negative number\")', 'Enter a number: 2\r\nPositive number\r\n\r\nEnter a number: 0\r\nZero', '2021-01-25 09:41:16', 1),
(31, 'Python Program to Check if a Number is Odd or Even', 'odd even', 'In this example, you will learn to check whether a number entered by the user is even or odd.\r\nA number is even if it is perfectly divisible by 2. When the number is divided by 2, we use the remainder operator % to compute the remainder. If the remainder is not zero, the number is odd.', '# Python program to check if the input number is odd or even.\r\n# A number is even if division by 2 gives a remainder of 0.\r\n# If the remainder is 1, it is an odd number.\r\n\r\nnum = int(input(\"Enter a number: \"))\r\nif (num % 2) == 0:\r\n   print(\"{0} is Even\".format(num))\r\nelse:\r\n   print(\"{0} is Odd\".format(num))', 'Enter a number: 43\r\n43 is Odd\r\n\r\nEnter a number: 18\r\n18 is Even', '2021-01-25 09:43:58', 1),
(32, 'Python Program to Check Leap Year', 'leap-year', 'In this program, you will learn to check whether a year is leap year or not. We will use nested if...else to solve this problem.\r\nA leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400. For example,\r\n\r\n2017 is not a leap year\r\n1900 is a not leap year\r\n2012 is a leap year\r\n2000 is a leap year', '# Python program to check if year is a leap year or not\r\n\r\nyear = 2000\r\n\r\n# To get year (integer input) from the user\r\n# year = int(input(\"Enter a year: \"))\r\n\r\nif (year % 4) == 0:\r\n   if (year % 100) == 0:\r\n       if (year % 400) == 0:\r\n           print(\"{0} is a leap year\".format(year))\r\n       else:\r\n           print(\"{0} is not a leap year\".format(year))\r\n   else:\r\n       print(\"{0} is a leap year\".format(year))\r\nelse:\r\n   print(\"{0} is not a leap year\".format(year))', '2000 is a leap year', '2021-01-25 09:45:00', 1),
(33, 'Python Program to Find the Largest Among Three Numbers', 'largest-numbers', 'In this program, you\'ll learn to find the largest among three numbers using if else and display it.\r\nIn the program below, the three numbers are stored in num1, num2 and num3 respectively. We\'ve used the if...elif...else ladder to find the largest among the three and display it.', '# Python program to find the largest number among the three input numbers\r\n\r\n# change the values of num1, num2 and num3\r\n# for a different result\r\nnum1 = 10\r\nnum2 = 14\r\nnum3 = 12\r\n\r\n# uncomment following lines to take three numbers from user\r\n#num1 = float(input(\"Enter first number: \"))\r\n#num2 = float(input(\"Enter second number: \"))\r\n#num3 = float(input(\"Enter third number: \"))\r\n\r\nif (num1 >= num2) and (num1 >= num3):\r\n   largest = num1\r\nelif (num2 >= num1) and (num2 >= num3):\r\n   largest = num2\r\nelse:\r\n   largest = num3\r\n\r\nprint(\"The largest number is\", largest)', 'The largest number is 14.0', '2021-01-25 09:46:17', 1),
(34, 'Python Program to Check Prime Number', 'prime-number', 'Example to check whether an integer is a prime number or not using for loop and if...else statement. If the number is not prime, it\'s explained in output why it is not a prime number.\r\nA positive integer greater than 1 which has no other factors except 1 and the number itself is called a prime number. 2, 3, 5, 7 etc. are prime numbers as they do not have any other factors. But 6 is not prime (it is composite) since, 2 x 3 = 6.\r\nIn this program, variable num is checked if it\'s prime or not. Numbers less than or equal to 1 are not prime numbers. Hence, we only proceed if the num is greater than 1.\r\n\r\nWe check if num is exactly divisible by any number from 2 to num - 1. If we find a factor in that range, the number is not prime. Else the number is prime.\r\n\r\nWe can decrease the range of numbers where we look for factors.\r\n\r\nIn the above program, our search range is from 2 to num - 1.\r\n\r\nWe could have used the range, range(2,num//2) or range(2,math.floor(math.sqrt(num))). The latter range is based on the fact that a composite number must have a factor less than the square root of that number. Otherwise, the number is prime.\r\n\r\nYou can change the value of variable num in the above source code to check whether a number is prime or not for other integers.', '# Program to check if a number is prime or not\r\n\r\nnum = 407\r\n\r\n# To take input from the user\r\n#num = int(input(\"Enter a number: \"))\r\n\r\n# prime numbers are greater than 1\r\nif num > 1:\r\n   # check for factors\r\n   for i in range(2,num):\r\n       if (num % i) == 0:\r\n           print(num,\"is not a prime number\")\r\n           print(i,\"times\",num//i,\"is\",num)\r\n           break\r\n   else:\r\n       print(num,\"is a prime number\")\r\n       \r\n# if input number is less than\r\n# or equal to 1, it is not prime\r\nelse:\r\n   print(num,\"is not a prime number\")', '407 is not a prime number\r\n11 times 37 is 407', '2021-01-25 09:47:18', 1),
(35, 'Python Program to Print all Prime Numbers in an Interval', 'prime-number', 'In this program, you\'ll learn to print all prime numbers within an interval using for loops and display it.\r\n\r\nA positive integer greater than 1 which has no other factors except 1 and the number itself is called a prime number.\r\n\r\n2, 3, 5, 7 etc. are prime numbers as they do not have any other factors. But 6 is not prime (it is composite) since, 2 x 3 = 6.', '# Python program to display all the prime numbers within an interval\r\n\r\nlower = 900\r\nupper = 1000\r\n\r\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\r\n\r\nfor num in range(lower, upper + 1):\r\n   # all prime numbers are greater than 1\r\n   if num > 1:\r\n       for i in range(2, num):\r\n           if (num % i) == 0:\r\n               break\r\n       else:\r\n           print(num)\r\n', 'Prime numbers between 900 and 1000 are:\r\n907\r\n911\r\n919\r\n929\r\n937\r\n941\r\n947\r\n953\r\n967\r\n971\r\n977\r\n983\r\n991\r\n997', '2021-01-25 09:50:17', 1),
(36, 'Python Program to Find the Factorial of a Number', 'factorial', 'The factorial of a number is the product of all the integers from 1 to that number.\r\n\r\nFor example, the factorial of 6 is 1*2*3*4*5*6 = 720. Factorial is not defined for negative numbers, and the factorial of zero is one, 0! = 1.', '# Python program to find the factorial of a number provided by the user.\r\n\r\n# change the value for a different result\r\nnum = 7\r\n\r\n# To take input from the user\r\n#num = int(input(\"Enter a number: \"))\r\n\r\nfactorial = 1\r\n\r\n# check if the number is negative, positive or zero\r\nif num < 0:\r\n   print(\"Sorry, factorial does not exist for negative numbers\")\r\nelif num == 0:\r\n   print(\"The factorial of 0 is 1\")\r\nelse:\r\n   for i in range(1,num + 1):\r\n       factorial = factorial*i\r\n   print(\"The factorial of\",num,\"is\",factorial)', 'The factorial of 7 is 5040', '2021-01-25 10:22:58', 1),
(37, 'Python Program to Display the multiplication Table', 'multiplication-table', 'In the program below, we have used the for loop to display the multiplication table of 12.', '# Multiplication table (from 1 to 10) in Python\r\n\r\nnum = 12\r\n\r\n# To take input from the user\r\n# num = int(input(\"Display multiplication table of? \"))\r\n\r\n# Iterate 10 times from i = 1 to 10\r\nfor i in range(1, 11):\r\n   print(num, \'x\', i, \'=\', num*i)', '12 x 1 = 12\r\n12 x 2 = 24\r\n12 x 3 = 36\r\n12 x 4 = 48\r\n12 x 5 = 60\r\n12 x 6 = 72\r\n12 x 7 = 84\r\n12 x 8 = 96\r\n12 x 9 = 108\r\n12 x 10 = 120', '2021-01-25 10:23:45', 1),
(38, 'Python Program to Print the Fibonacci sequence', 'fibonacci', 'A Fibonacci sequence is the integer sequence of 0, 1, 1, 2, 3, 5, 8....\r\n\r\nThe first two terms are 0 and 1. All other terms are obtained by adding the preceding two terms. This means to say the nth term is the sum of (n-1)th and (n-2)th term.', '# Program to display the Fibonacci sequence up to n-th term\r\n\r\nnterms = int(input(\"How many terms? \"))\r\n\r\n# first two terms\r\nn1, n2 = 0, 1\r\ncount = 0\r\n\r\n# check if the number of terms is valid\r\nif nterms <= 0:\r\n   print(\"Please enter a positive integer\")\r\nelif nterms == 1:\r\n   print(\"Fibonacci sequence upto\",nterms,\":\")\r\n   print(n1)\r\nelse:\r\n   print(\"Fibonacci sequence:\")\r\n   while count < nterms:\r\n       print(n1)\r\n       nth = n1 + n2\r\n       # update values\r\n       n1 = n2\r\n       n2 = nth\r\n       count += 1', 'How many terms? 7\r\nFibonacci sequence:\r\n0\r\n1\r\n1\r\n2\r\n3\r\n5\r\n8', '2021-01-25 10:24:36', 1),
(39, 'Python Program to Check Armstrong Number', 'armstrong-number', 'A positive integer is called an Armstrong number of order n if\r\n\r\nabcd... = a^n + b^n + c^n + d^n + ...\r\nIn case of an Armstrong number of 3 digits, the sum of cubes of each digit is equal to the number itself. For example:\r\n\r\n153 = 1*1*1 + 5*5*5 + 3*3*3  // 153 is an Armstrong number.', '# Python program to check if the number is an Armstrong number or not\r\n\r\n# take input from the user\r\nnum = int(input(\"Enter a number: \"))\r\n\r\n# initialize sum\r\nsum = 0\r\n\r\n# find the sum of the cube of each digit\r\ntemp = num\r\nwhile temp > 0:\r\n   digit = temp % 10\r\n   sum += digit ** 3\r\n   temp //= 10\r\n\r\n# display the result\r\nif num == sum:\r\n   print(num,\"is an Armstrong number\")\r\nelse:\r\n   print(num,\"is not an Armstrong number\")', 'Enter a number: 663\r\n663 is not an Armstrong number\r\n\r\nEnter a number: 407\r\n407 is an Armstrong number', '2021-01-25 10:26:07', 1),
(40, 'Python Program to Find Armstrong Number in an Interval', 'armstrong-number', 'Example to find all Armstrong numbers between two integers. To solve this problem, we have used nested loop and if statement.\r\n\r\nA positive integer is called an Armstrong number of order n if\r\n\r\nabcd... = a^n + b^n + c^n + d^n + ...\r\nFor example,\r\n\r\n153 = 1*1*1 + 5*5*5 + 3*3*3  // 153 is an Armstrong number.\r\n', '# Program to check Armstrong numbers in a certain interval\r\n\r\nlower = 100\r\nupper = 2000\r\n\r\nfor num in range(lower, upper + 1):\r\n\r\n   # order of number\r\n   order = len(str(num))\r\n    \r\n   # initialize sum\r\n   sum = 0\r\n\r\n   temp = num\r\n   while temp > 0:\r\n       digit = temp % 10\r\n       sum += digit ** order\r\n       temp //= 10\r\n\r\n   if num == sum:\r\n       print(num)', '153\r\n370\r\n371\r\n407\r\n1634', '2021-01-25 10:27:05', 1),
(41, 'Python Program to Find the Sum of Natural Numbers', 'natural-numbers sum', 'In this program, you\'ll learn to find the sum of n natural numbers using while loop and display it.\r\n\r\nIn the program below, we\'ve used an if...else statement in combination with a while loop to calculate the sum of natural numbers up to num.', '# Sum of natural numbers up to num\r\n\r\nnum = 16\r\n\r\nif num < 0:\r\n   print(\"Enter a positive number\")\r\nelse:\r\n   sum = 0\r\n   # use while loop to iterate until zero\r\n   while(num > 0):\r\n       sum += num\r\n       num -= 1\r\n   print(\"The sum is\", sum)', 'The sum is 136', '2021-01-25 10:28:13', 1),
(42, 'Python Program To Display Powers of 2 Using Anonymous Function', 'power-of-two anonymous-function', 'In this program, you\'ll learn to display powers of the integer 2 using Python anonymous function.\r\n\r\nIn the program below, we have used an anonymous (lambda) function inside the map() built-in function to find the powers of 2.', '# Display the powers of 2 using anonymous function\r\n\r\nterms = 10\r\n\r\n# Uncomment code below to take input from the user\r\n# terms = int(input(\"How many terms? \"))\r\n\r\n# use anonymous function\r\nresult = list(map(lambda x: 2 ** x, range(terms)))\r\n\r\nprint(\"The total terms are:\",terms)\r\nfor i in range(terms):\r\n   print(\"2 raised to power\",i,\"is\",result[i])', 'The total terms are: 10\r\n2 raised to power 0 is 1\r\n2 raised to power 1 is 2\r\n2 raised to power 2 is 4\r\n2 raised to power 3 is 8\r\n2 raised to power 4 is 16\r\n2 raised to power 5 is 32\r\n2 raised to power 6 is 64\r\n2 raised to power 7 is 128\r\n2 raised to power 8 is 256\r\n2 raised to power 9 is 512', '2021-01-25 10:30:39', 1),
(43, 'Python Program to Find Numbers Divisible by Another Number', 'divisible', 'In this program, you\'ll learn to find the numbers divisible by another number and display it.\r\n\r\nIn the program below, we have used anonymous (lambda) function inside the filter() built-in function to find all the numbers divisible by 13 in the list.', '# Take a list of numbers\r\nmy_list = [12, 65, 54, 39, 102, 339, 221,]\r\n\r\n# use anonymous function to filter\r\nresult = list(filter(lambda x: (x % 13 == 0), my_list))\r\n\r\n# display the result\r\nprint(\"Numbers divisible by 13 are\",result)', 'Numbers divisible by 13 are [65, 39, 221]', '2021-01-25 10:31:32', 1),
(44, 'Python Program to Convert Decimal to Binary, Octal and Hexadecimal', 'decimal binary octal hexadecimal', 'In this program, you\'ll learn to convert decimal to binary, octal and hexadecimal, and display it.\r\n\r\nThe decimal system is the most widely used number system. However, computers only understand binary. Binary, octal and hexadecimal number systems are closely related, and we may require to convert decimal into these systems.\r\n\r\nThe decimal system is base 10 (ten symbols, 0-9, are used to represent a number) and similarly, binary is base 2, octal is base 8 and hexadecimal is base 16.\r\n\r\nA number with the prefix 0b is considered binary, 0o is considered octal and 0x as hexadecimal. For example:\r\n\r\n60 = 0b11100 = 0o74 = 0x3c', '# Python program to convert decimal into other number systems\r\ndec = 344\r\n\r\nprint(\"The decimal value of\", dec, \"is:\")\r\nprint(bin(dec), \"in binary.\")\r\nprint(oct(dec), \"in octal.\")\r\nprint(hex(dec), \"in hexadecimal.\")', 'The decimal value of 344 is:\r\n0b101011000 in binary.\r\n0o530 in octal.\r\n0x158 in hexadecimal.', '2021-01-25 10:32:41', 1),
(45, 'Python Program to Find ASCII Value of Character', 'ASCII', 'In this program, you\'ll learn to find the ASCII value of a character and display it.\r\n\r\nASCII stands for American Standard Code for Information Interchange.\r\n\r\nIt is a numeric value given to different characters and symbols, for computers to store and manipulate. For example, the ASCII value of the letter \'A\' is 65.', '# Program to find the ASCII value of the given character\r\n\r\nc = \'p\'\r\nprint(\"The ASCII value of \'\" + c + \"\' is\", ord(c))', 'The ASCII value of \'p\' is 112', '2021-01-25 10:33:22', 1),
(46, 'Python Program to Find HCF or GCD', 'GCD HCF', 'In this example, you will learn to find the GCD of two numbers using two different methods: function and loops and, Euclidean algorithm.\r\n\r\nThe highest common factor (H.C.F) or greatest common divisor (G.C.D) of two numbers is the largest positive integer that perfectly divides the two given numbers. For example, the H.C.F of 12 and 14 is 2.', '# Python program to find H.C.F of two numbers\r\n\r\n# define a function\r\ndef compute_hcf(x, y):\r\n\r\n# choose the smaller number\r\n    if x > y:\r\n        smaller = y\r\n    else:\r\n        smaller = x\r\n    for i in range(1, smaller+1):\r\n        if((x % i == 0) and (y % i == 0)):\r\n            hcf = i \r\n    return hcf\r\n\r\nnum1 = 54 \r\nnum2 = 24\r\n\r\nprint(\"The H.C.F. is\", compute_hcf(num1, num2))', 'The H.C.F. is 6', '2021-01-25 10:51:11', 1),
(47, 'Python Program to Find LCM', 'LCM', 'In this program, you\'ll learn to find the LCM of two numbers and display it.\r\n\r\nThe least common multiple (L.C.M.) of two numbers is the smallest positive integer that is perfectly divisible by the two given numbers.\r\n\r\nFor example, the L.C.M. of 12 and 14 is 84.', '# Python Program to find the L.C.M. of two input number\r\n\r\ndef compute_lcm(x, y):\r\n\r\n   # choose the greater number\r\n   if x > y:\r\n       greater = x\r\n   else:\r\n       greater = y\r\n\r\n   while(True):\r\n       if((greater % x == 0) and (greater % y == 0)):\r\n           lcm = greater\r\n           break\r\n       greater += 1\r\n\r\n   return lcm\r\n\r\nnum1 = 54\r\nnum2 = 24\r\n\r\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))', 'The L.C.M. is 216', '2021-01-25 10:51:59', 1),
(48, 'Python Program to Find the Factors of a Number', 'factors', 'In this program, you\'ll learn to find the factors of a number using the for loop.', '# Python Program to find the factors of a number\r\n\r\n# This function computes the factor of the argument passed\r\ndef print_factors(x):\r\n   print(\"The factors of\",x,\"are:\")\r\n   for i in range(1, x + 1):\r\n       if x % i == 0:\r\n           print(i)\r\n\r\nnum = 320\r\n\r\nprint_factors(num)', 'The factors of 320 are:\r\n1\r\n2\r\n4\r\n5\r\n8\r\n10\r\n16\r\n20\r\n32\r\n40\r\n64\r\n80\r\n160\r\n320', '2021-01-25 10:52:33', 1),
(49, 'Python Program to Make a Simple Calculator : Simple Calculator by Using Functions', 'calculator', 'In this example you will learn to create a simple calculator that can add, subtract, multiply or divide depending upon the input from the user.\r\n\r\nIn this program, we ask the user to choose an operation. Options 1, 2, 3, and 4 are valid. If any other input is given, Invalid Input is displayed and the loop continues until a valid option is selected.\r\n\r\nTwo numbers are taken and an if...elif...else branching is used to execute a particular section. User-defined functions add(), subtract(), multiply() and divide() evaluate respective operations and display the output.', '# Program make a simple calculator\r\n\r\n# This function adds two numbers\r\ndef add(x, y):\r\n    return x + y\r\n\r\n# This function subtracts two numbers\r\ndef subtract(x, y):\r\n    return x - y\r\n\r\n# This function multiplies two numbers\r\ndef multiply(x, y):\r\n    return x * y\r\n\r\n# This function divides two numbers\r\ndef divide(x, y):\r\n    return x / y\r\n\r\n\r\nprint(\"Select operation.\")\r\nprint(\"1.Add\")\r\nprint(\"2.Subtract\")\r\nprint(\"3.Multiply\")\r\nprint(\"4.Divide\")\r\n\r\nwhile True:\r\n    # Take input from the user\r\n    choice = input(\"Enter choice(1/2/3/4): \")\r\n\r\n    # Check if choice is one of the four options\r\n    if choice in (\'1\', \'2\', \'3\', \'4\'):\r\n        num1 = float(input(\"Enter first number: \"))\r\n        num2 = float(input(\"Enter second number: \"))\r\n\r\n        if choice == \'1\':\r\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\r\n\r\n        elif choice == \'2\':\r\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\r\n\r\n        elif choice == \'3\':\r\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\r\n\r\n        elif choice == \'4\':\r\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\r\n        break\r\n    else:\r\n        print(\"Invalid Input\")', 'Select operation.\r\n1.Add\r\n2.Subtract\r\n3.Multiply\r\n4.Divide\r\nEnter choice(1/2/3/4): 3\r\nEnter first number: 15\r\nEnter second number: 14\r\n15.0 * 14.0 = 210.0', '2021-01-25 10:53:34', 1),
(50, 'Python Program to Shuffle Deck of Cards', 'shuffle cards', 'In this program, you\'ll learn to shuffle a deck of cards using random module.', '# Python program to shuffle a deck of card\r\n\r\n# importing modules\r\nimport itertools, random\r\n\r\n# make a deck of cards\r\ndeck = list(itertools.product(range(1,14),[\'Spade\',\'Heart\',\'Diamond\',\'Club\']))\r\n\r\n# shuffle the cards\r\nrandom.shuffle(deck)\r\n\r\n# draw five cards\r\nprint(\"You got:\")\r\nfor i in range(5):\r\n   print(deck[i][0], \"of\", deck[i][1])', 'You got:\r\n5 of Heart\r\n1 of Heart\r\n8 of Spade\r\n12 of Spade\r\n4 of Spade', '2021-01-25 10:56:49', 1),
(51, 'Python Program to Display Calendar', 'calendar', 'Python has a built-in function, calendar to work with date related tasks. You will learn to display the calendar of a given date in this example.\r\n\r\nIn the program below, we import the calendar module. The built-in function month() inside the module takes in the year and the month and displays the calendar for that month of the year.', '# Program to display calendar of the given month and year\r\n\r\n# importing calendar module\r\nimport calendar\r\n\r\nyy = 2014  # year\r\nmm = 11    # month\r\n\r\n# To take month and year input from the user\r\n# yy = int(input(\"Enter year: \"))\r\n# mm = int(input(\"Enter month: \"))\r\n\r\n# display the calendar\r\nprint(calendar.month(yy, mm))', '   November 2014\r\nMo Tu We Th Fr Sa Su\r\n             1  2\r\n3  4  5  6 7  8  9\r\n10 11 12 13 14 15 16\r\n17 18 19 20 21 22 23\r\n24 25 26 27 28 29 30', '2021-01-25 10:57:44', 1),
(52, 'Python Program to Display Fibonacci Sequence Using Recursion', 'fibonacci recursion', 'In this program, you\'ll learn to display Fibonacci sequence using a recursive function.\r\n\r\nA Fibonacci sequence is the integer sequence of 0, 1, 1, 2, 3, 5, 8....\r\n\r\nThe first two terms are 0 and 1. All other terms are obtained by adding the preceding two terms.This means to say the nth term is the sum of (n-1)th and (n-2)th term.', '# Python program to display the Fibonacci sequence\r\n\r\ndef recur_fibo(n):\r\n   if n <= 1:\r\n       return n\r\n   else:\r\n       return(recur_fibo(n-1) + recur_fibo(n-2))\r\n\r\nnterms = 10\r\n\r\n# check if the number of terms is valid\r\nif nterms <= 0:\r\n   print(\"Plese enter a positive integer\")\r\nelse:\r\n   print(\"Fibonacci sequence:\")\r\n   for i in range(nterms):\r\n       print(recur_fibo(i))', 'Fibonacci sequence:\r\n0\r\n1\r\n1\r\n2\r\n3\r\n5\r\n8\r\n13\r\n21\r\n34', '2021-01-25 10:59:07', 1),
(53, 'Python Program to Find Sum of Natural Numbers Using Recursion', 'natural-numbers sum recursion', 'In this program, you\'ll learn to find the sum of natural numbers using recursive function.\r\n\r\nIn the program below, we\'ve used a recursive function recur_sum() to compute the sum up to the given number.', '# Python program to find the sum of natural using recursive function\r\n\r\ndef recur_sum(n):\r\n   if n <= 1:\r\n       return n\r\n   else:\r\n       return n + recur_sum(n-1)\r\n\r\n# change this value for a different result\r\nnum = 16\r\n\r\nif num < 0:\r\n   print(\"Enter a positive number\")\r\nelse:\r\n   print(\"The sum is\",recur_sum(num))', 'The sum is 136', '2021-01-25 10:59:49', 1),
(54, 'Python Program to Find Factorial of Number Using Recursion', 'factorial recursion', 'In this program, you\'ll learn to find the factorial of a number using recursive function.\r\n\r\nThe factorial of a number is the product of all the integers from 1 to that number.\r\n\r\nFor example, the factorial of 6 is 1*2*3*4*5*6 = 720. Factorial is not defined for negative numbers and the factorial of zero is one, 0! = 1.', '# Factorial of a number using recursion\r\n\r\ndef recur_factorial(n):\r\n   if n == 1:\r\n       return n\r\n   else:\r\n       return n*recur_factorial(n-1)\r\n\r\nnum = 7\r\n\r\n# check if the number is negative\r\nif num < 0:\r\n   print(\"Sorry, factorial does not exist for negative numbers\")\r\nelif num == 0:\r\n   print(\"The factorial of 0 is 1\")\r\nelse:\r\n   print(\"The factorial of\", num, \"is\", recur_factorial(num))', 'The factorial of 7 is 5040', '2021-01-25 11:00:38', 1),
(55, 'Python Program to Convert Decimal to Binary Using Recursion', 'binary-to-decimal recursion', 'In this program, you will learn to convert decimal number to binary using recursive function.\r\n\r\nDecimal number is converted into binary by dividing the number successively by 2 and printing the remainder in reverse order.', '# Function to print binary number using recursion\r\ndef convertToBinary(n):\r\n   if n > 1:\r\n       convertToBinary(n//2)\r\n   print(n % 2,end = \'\')\r\n\r\n# decimal number\r\ndec = 34\r\n\r\nconvertToBinary(dec)\r\nprint()', '100010', '2021-01-25 11:02:02', 1),
(56, 'Python Program to Add Two Matrices : Matrix Addition using Nested Loop', 'add-matrices sum-matrices', 'In this program, you\'ll learn to add two matrices using Nested loop and Next list comprehension, and display it.\r\n\r\nIn Python, we can implement a matrix as a nested list (list inside a list). We can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix. First row can be selected as X[0] and the element in first row, first column can be selected as X[0][0].\r\n\r\nWe can perform matrix addition in various ways in Python. Here are a couple of them.', '# Program to add two matrices using nested loop\r\n\r\nX = [[12,7,3],\r\n    [4 ,5,6],\r\n    [7 ,8,9]]\r\n\r\nY = [[5,8,1],\r\n    [6,7,3],\r\n    [4,5,9]]\r\n\r\nresult = [[0,0,0],\r\n         [0,0,0],\r\n         [0,0,0]]\r\n\r\n# iterate through rows\r\nfor i in range(len(X)):\r\n   # iterate through columns\r\n   for j in range(len(X[0])):\r\n       result[i][j] = X[i][j] + Y[i][j]\r\n\r\nfor r in result:\r\n   print(r)', '[17, 15, 4]\r\n[10, 12, 9]\r\n[11, 13, 18]', '2021-01-25 11:02:56', 1),
(57, 'Python Program to Transpose a Matrix : Matrix Transpose using Nested Loop', 'transpose matrix', 'In this example, you will learn to transpose a matrix (which is created by using a nested list).\r\n\r\nIn Python, we can implement a matrix as a nested list (list inside a list). We can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix. The first row can be selected as X[0]. And, the element in the first-row first column can be selected as X[0][0].\r\n\r\nTranspose of a matrix is the interchanging of rows and columns. It is denoted as X\'. The element at ith row and jth column in X will be placed at jth row and ith column in X\'. So if X is a 3x2 matrix, X\' will be a 2x3 matrix.', '# Program to transpose a matrix using a nested loop\r\n\r\nX = [[12,7],\r\n    [4 ,5],\r\n    [3 ,8]]\r\n\r\nresult = [[0,0,0],\r\n         [0,0,0]]\r\n\r\n# iterate through rows\r\nfor i in range(len(X)):\r\n   # iterate through columns\r\n   for j in range(len(X[0])):\r\n       result[j][i] = X[i][j]\r\n\r\nfor r in result:\r\n   print(r)', '[12, 4, 3]\r\n[7, 5, 8]', '2021-01-25 11:04:17', 1),
(58, 'Python Program to Transpose a Matrix : Matrix Transpose using Nested List Comprehension', 'transpose matrix', 'n Python, we can implement a matrix as a nested list (list inside a list). We can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix. The first row can be selected as X[0]. And, the element in the first-row first column can be selected as X[0][0].\r\n\r\nTranspose of a matrix is the interchanging of rows and columns. It is denoted as X\'. The element at ith row and jth column in X will be placed at jth row and ith column in X\'. So if X is a 3x2 matrix, X\' will be a 2x3 matrix.', '\'\'\' Program to transpose a matrix using list comprehension\'\'\'\r\n\r\nX = [[12,7],\r\n    [4 ,5],\r\n    [3 ,8]]\r\n\r\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\r\n\r\nfor r in result:\r\n   print(r)', '[12, 4, 3]\r\n[7, 5, 8]', '2021-01-25 11:05:20', 1),
(59, 'Python Program to Add Two Matrices : Matrix Addition using Nested List Comprehension', 'add-matrices sum-matrices', 'In this program, you\'ll learn to add two matrices using Nested loop and Next list comprehension, and display it.\r\n\r\nIn Python, we can implement a matrix as a nested list (list inside a list). We can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix. First row can be selected as X[0] and the element in first row, first column can be selected as X[0][0].\r\n\r\nIn this program we have used nested for loops to iterate through each row and each column. At each point, we add the corresponding elements in the two matrices and store it in the result.', '# Program to add two matrices using list comprehension\r\n\r\nX = [[12,7,3],\r\n    [4 ,5,6],\r\n    [7 ,8,9]]\r\n\r\nY = [[5,8,1],\r\n    [6,7,3],\r\n    [4,5,9]]\r\n\r\nresult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\r\n\r\nfor r in result:\r\n   print(r)', '[17, 15, 4]\r\n[10, 12, 9]\r\n[11, 13, 18]', '2021-01-25 11:07:50', 1),
(60, 'Python Program to Multiply Two Matrices', 'matrix multiply', 'In this example, we will learn to multiply matrices using python.\r\n\r\nIn Python, we can implement a matrix as nested list (list inside a list).\r\n\r\nWe can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix.\r\n\r\nThe first row can be selected as X[0]. And, the element in first row, first column can be selected as X[0][0].\r\n\r\nMultiplication of two matrices X and Y is defined only if the number of columns in X is equal to the number of rows Y.\r\n\r\nIf X is a n x m matrix and Y is a m x l matrix then, XY is defined and has the dimension n x l (but YX is not defined). ', '# Program to multiply two matrices using nested loops\r\n\r\n# 3x3 matrix\r\nX = [[12,7,3],\r\n    [4 ,5,6],\r\n    [7 ,8,9]]\r\n# 3x4 matrix\r\nY = [[5,8,1,2],\r\n    [6,7,3,0],\r\n    [4,5,9,1]]\r\n# result is 3x4\r\nresult = [[0,0,0,0],\r\n         [0,0,0,0],\r\n         [0,0,0,0]]\r\n\r\n# iterate through rows of X\r\nfor i in range(len(X)):\r\n   # iterate through columns of Y\r\n   for j in range(len(Y[0])):\r\n       # iterate through rows of Y\r\n       for k in range(len(Y)):\r\n           result[i][j] += X[i][k] * Y[k][j]\r\n\r\nfor r in result:\r\n   print(r)', '[114, 160, 60, 27]\r\n[74, 97, 73, 14]\r\n[119, 157, 112, 23]', '2021-01-25 11:09:45', 1),
(61, 'Python Program to Multiply Two Matrices : Matrix Multiplication Using Nested List Comprehension', 'matrix multiply', 'In Python, we can implement a matrix as nested list (list inside a list).\r\n\r\nWe can treat each element as a row of the matrix.\r\n\r\nFor example X = [[1, 2], [4, 5], [3, 6]] would represent a 3x2 matrix.\r\n\r\nThe first row can be selected as X[0]. And, the element in first row, first column can be selected as X[0][0].\r\n\r\nMultiplication of two matrices X and Y is defined only if the number of columns in X is equal to the number of rows Y.\r\n\r\nIf X is a n x m matrix and Y is a m x l matrix then, XY is defined and has the dimension n x l (but YX is not defined). ', '# Program to multiply two matrices using list comprehension\r\n\r\n# 3x3 matrix\r\nX = [[12,7,3],\r\n    [4 ,5,6],\r\n    [7 ,8,9]]\r\n\r\n# 3x4 matrix\r\nY = [[5,8,1,2],\r\n    [6,7,3,0],\r\n    [4,5,9,1]]\r\n\r\n# result is 3x4\r\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\r\n\r\nfor r in result:\r\n   print(r)', '[114, 160, 60, 27]\r\n[74, 97, 73, 14]\r\n[119, 157, 112, 23]', '2021-01-25 11:10:35', 1),
(62, 'Python Program to Check Whether a String is Palindrome or Not', 'palindrome', 'In this program. you\'ll learn to check whether a string is palindrome or Not\r\n\r\nA palindrome is a string that is the same read forward or backward.\r\n\r\nFor example, \"dad\" is the same in forward or reverse direction. Another example is \"aibohphobia\", which literally means, an irritable fear of palindromes.', '# Program to check if a string is palindrome or not\r\n\r\nmy_str = \'aIbohPhoBiA\'\r\n\r\n# make it suitable for caseless comparison\r\nmy_str = my_str.casefold()\r\n\r\n# reverse the string\r\nrev_str = reversed(my_str)\r\n\r\n# check if the string is equal to its reverse\r\nif list(my_str) == list(rev_str):\r\n   print(\"The string is a palindrome.\")\r\nelse:\r\n   print(\"The string is not a palindrome.\")', 'The string is a palindrome.', '2021-01-25 11:11:28', 1),
(63, 'Python Program to Remove Punctuations From a String', 'punctuations', 'This program removes all punctuations from a string. We will check each character of the string using for loop. If the character is a punctuation, empty string is assigned to it.\r\n\r\nSometimes, we may wish to break a sentence into a list of words.\r\n\r\nIn such cases, we may first want to clean up the string and remove all the punctuation marks. Here is an example of how it is done.', '# define punctuation\r\npunctuations = \'\'\'!()-[]{};:\'\"\\,<>./?@#$%^&*_~\'\'\'\r\n\r\nmy_str = \"Hello!!!, he said ---and went.\"\r\n\r\n# To take input from the user\r\n# my_str = input(\"Enter a string: \")\r\n\r\n# remove punctuation from the string\r\nno_punct = \"\"\r\nfor char in my_str:\r\n   if char not in punctuations:\r\n       no_punct = no_punct + char\r\n\r\n# display the unpunctuated string\r\nprint(no_punct)', 'Hello he said and went', '2021-01-25 11:12:41', 1),
(64, 'Python Program to Sort Words in Alphabetic Order', 'sort alphabetical', 'In this program, you\'ll learn to sort the words in alphabetic order using for loop and display it.\r\n\r\nIn this example, we illustrate how words can be sorted lexicographically (alphabetic order).', '# Program to sort alphabetically the words form a string provided by the user\r\n\r\nmy_str = \"Hello this Is an Example With cased letters\"\r\n\r\n# To take input from the user\r\n#my_str = input(\"Enter a string: \")\r\n\r\n# breakdown the string into a list of words\r\nwords = [word.lower() for word in my_str.split()]\r\n\r\n# sort the list\r\nwords.sort()\r\n\r\n# display the sorted words\r\n\r\nprint(\"The sorted words are:\")\r\nfor word in words:\r\n   print(word)', 'The sorted words are:\r\nan\r\ncased\r\nexample\r\nhello\r\nis\r\nletters\r\nthis\r\nwith', '2021-01-25 11:13:55', 1),
(65, 'Python Program to Illustrate Different Set Operations', 'set-operations', 'In this example, we have defined two set variables and we have performed different set operations: union, intersection, difference and symmetric difference.\r\n\r\nPython offers a datatype called set whose elements must be unique. It can be used to perform different set operations like union, intersection, difference and symmetric difference.', '# Program to perform different set operations like in mathematics\r\n\r\n# define three sets\r\nE = {0, 2, 4, 6, 8};\r\nN = {1, 2, 3, 4, 5};\r\n\r\n# set union\r\nprint(\"Union of E and N is\",E | N)\r\n\r\n# set intersection\r\nprint(\"Intersection of E and N is\",E & N)\r\n\r\n# set difference\r\nprint(\"Difference of E and N is\",E - N)\r\n\r\n# set symmetric difference\r\nprint(\"Symmetric difference of E and N is\",E ^ N)', 'Union of E and N is {0, 1, 2, 3, 4, 5, 6, 8}\r\nIntersection of E and N is {2, 4}\r\nDifference of E and N is {8, 0, 6}\r\nSymmetric difference of E and N is {0, 1, 3, 5, 6, 8}', '2021-01-25 11:14:46', 1),
(66, 'Python Program to Count the Number of Each Vowel : Using Dictionary', 'count-vowels', 'In this program, you\'ll learn to count the number of each vowel in a string using dictionary and list comprehension.', '# Program to count the number of each vowels\r\n\r\n# string of vowels\r\nvowels = \'aeiou\'\r\n\r\nip_str = \'Hello, have you tried our tutorial section yet?\'\r\n\r\n# make it suitable for caseless comparisions\r\nip_str = ip_str.casefold()\r\n\r\n# make a dictionary with each vowel a key and value 0\r\ncount = {}.fromkeys(vowels,0)\r\n\r\n# count the vowels\r\nfor char in ip_str:\r\n   if char in count:\r\n       count[char] += 1\r\n\r\nprint(count)', '{\'o\': 5, \'i\': 3, \'a\': 2, \'e\': 5, \'u\': 3}', '2021-01-25 11:15:45', 1),
(67, 'Python Program to Count the Number of Each Vowel : Using a list and a dictionary comprehension', 'count-vowels', 'In this program, you\'ll learn to count the number of each vowel in a string using dictionary and list comprehension.', '# Using dictionary and list comprehension\r\n\r\nip_str = \'Hello, have you tried our tutorial section yet?\'\r\n\r\n# make it suitable for caseless comparisions\r\nip_str = ip_str.casefold()\r\n\r\n# count the vowels\r\ncount = {x:sum([1 for char in ip_str if char == x]) for x in \'aeiou\'}\r\n\r\nprint(count)', '{\'o\': 5, \'i\': 3, \'a\': 2, \'e\': 5, \'u\': 3}', '2021-01-25 11:16:34', 1),
(68, 'Python Program to Merge Mails', 'merge-mails', 'In this program, you\'ll learn to merge mails into one.\r\n\r\nWhen we want to send the same invitations to many people, the body of the mail does not change. Only the name (and maybe address) needs to be changed.\r\n\r\nMail merge is a process of doing this. Instead of writing each mail separately, we have a template for body of the mail and a list of names that we merge together to form all the mails.\r\n\r\nFor this program, we have written all the names in separate lines in the file \"names.txt\". The body is in the \"body.txt\" file.\r\n\r\nWe open both the files in reading mode and iterate over each name using a for loop. A new file with the name \"[name].txt\" is created, where name is the name of that person.\r\n\r\nWe use strip() method to clean up leading and trailing whitespaces (reading a line from the file also reads the newline \'\\n\' character). Finally, we write the content of the mail into this file using the write() method.', '# Python program to mail merger\r\n# Names are in the file names.txt\r\n# Body of the mail is in body.txt\r\n\r\n# open names.txt for reading\r\nwith open(\"names.txt\", \'r\', encoding=\'utf-8\') as names_file:\r\n\r\n    # open body.txt for reading\r\n    with open(\"body.txt\", \'r\', encoding=\'utf-8\') as body_file:\r\n\r\n        # read entire content of the body\r\n        body = body_file.read()\r\n\r\n        # iterate over names\r\n        for name in names_file:\r\n            mail = \"Hello \" + name.strip() + \"\\n\" + body\r\n\r\n            # write the mails to individual files\r\n            with open(name.strip()+\".txt\", \'w\', encoding=\'utf-8\') as mail_file:\r\n                mail_file.write(mail)', '', '2021-01-25 11:18:38', 1),
(69, 'Python Program to Find the Size (Resolution) of a Image', 'image-size', 'You will learn to find resolution of a jpeg image in this example without using external libraries.\r\n\r\nJPEG (pronounced \"jay-peg\") stands for Joint Photographic Experts Group. It is one of the most widely used compression techniques for image compression.\r\n\r\nMost of the file formats have headers (initial few bytes) which contain useful information about the file.\r\n\r\nFor example, jpeg headers contain information like height, width, number of color (grayscale or RGB) etc. In this program, we find the resolution of a jpeg image reading these headers, without using any external library.', 'def jpeg_res(filename):\r\n   \"\"\"\"This function prints the resolution of the jpeg image file passed into it\"\"\"\r\n\r\n   # open image for reading in binary mode\r\n   with open(filename,\'rb\') as img_file:\r\n\r\n       # height of image (in 2 bytes) is at 164th position\r\n       img_file.seek(163)\r\n\r\n       # read the 2 bytes\r\n       a = img_file.read(2)\r\n\r\n       # calculate height\r\n       height = (a[0] << 8) + a[1]\r\n\r\n       # next 2 bytes is width\r\n       a = img_file.read(2)\r\n\r\n       # calculate width\r\n       width = (a[0] << 8) + a[1]\r\n\r\n   print(\"The resolution of the image is\",width,\"x\",height)\r\n\r\njpeg_res(\"img1.jpg\")', 'The resolution of the image is 280 x 280', '2021-01-25 11:20:44', 1);
INSERT INTO `posts` (`id`, `title`, `tags`, `description`, `code`, `output`, `date`, `user_id`) VALUES
(70, 'Python Program to Find Hash of File', 'hash file', 'In this article, you\'ll learn to find the hash of a file and display it.\r\n\r\nHash functions take an arbitrary amount of data and return a fixed-length bit string. The output of the function is called the digest message.\r\n\r\nThey are widely used in cryptography for authentication purposes. There are many hashing functions like MD5, SHA-1 etc. Refer this page to know more about hash functions in cryptography.\r\n\r\nIn this example, we will illustrate how to hash a file. We will use the SHA-1 hashing algorithm. The digest of SHA-1 is 160 bits long.\r\n\r\nWe do not feed the data from the file all at once, because some files are very large to fit in memory all at once. Breaking the file into small chunks will make the process memory efficient.', '# Python rogram to find the SHA-1 message digest of a file\r\n\r\n# importing the hashlib module\r\nimport hashlib\r\n\r\ndef hash_file(filename):\r\n   \"\"\"\"This function returns the SHA-1 hash\r\n   of the file passed into it\"\"\"\r\n\r\n   # make a hash object\r\n   h = hashlib.sha1()\r\n\r\n   # open file for reading in binary mode\r\n   with open(filename,\'rb\') as file:\r\n\r\n       # loop till the end of the file\r\n       chunk = 0\r\n       while chunk != b\'\':\r\n           # read only 1024 bytes at a time\r\n           chunk = file.read(1024)\r\n           h.update(chunk)\r\n\r\n   # return the hex representation of digest\r\n   return h.hexdigest()\r\n\r\nmessage = hash_file(\"track1.mp3\")\r\nprint(message)', '633d7356947eec543c50b76a1852f92427f4dca9', '2021-01-25 11:21:38', 1);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `name` varchar(1000) NOT NULL,
  `password` varchar(1000) NOT NULL,
  `email` varchar(1000) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `password`, `email`) VALUES
(1, 'pyhub', 'pyhub', ''),
(6, 'admin', 'admin', ''),
(7, 'fazil', 'fazil', '');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `email_verification`
--
ALTER TABLE `email_verification`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `email_verification`
--
ALTER TABLE `email_verification`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=71;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
